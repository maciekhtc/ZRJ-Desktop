/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ZRJClient;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.Socket;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Maciej
 */
public class Okno extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private boolean laser = false;
    private final boolean test = false;                           //czy wysylac na serwer lokalny (testowy)
    private PrintWriter out;                                //pola klasy
    private int moc_max = 0;
    private int l_diff = 0;
    private int r_diff = 0;
    private int drive_direction = 0;
    private int skala_mocy = 100;
    private int skala_skretu = 100;
    private int data_flow = 0;                              // 0-normalnie 1-zapis 2-odczyt
    private ArrayList<String> lista;                        //lista przechowywujaca wartosci sterujace z/do pliku
    private String nazwaPliku = "";
    private OknoPliku oknoPliku;

    public Okno() {
        initComponents();
        panelVideo1.setFocusable(true);
        lista = new ArrayList();
    }
    //konstruktor

    public void setData_flow(int data_flow) {
        this.data_flow = data_flow;
    }
    //ustawianie zmiennej kontrolujacej sposob sterowania

    public int getData_flow() {
        return data_flow;
    }

    public String getNazwaPliku() {
        return nazwaPliku;
    }

    public void setNazwaPliku(String nazwaPliku) {
        this.nazwaPliku = nazwaPliku;
    }

    public ArrayList<String> getLista() {
        return lista;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelVideo1 = new ZRJClient.PanelVideo();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ZRJ Test Client");
        setBounds(new java.awt.Rectangle(0, 0, 660, 560));
        setLocationByPlatform(true);
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 660, 560));
        setMaximumSize(new java.awt.Dimension(660, 560));
        setMinimumSize(new java.awt.Dimension(660, 560));
        setPreferredSize(new java.awt.Dimension(660, 560));
        setResizable(false);

        panelVideo1.setBackground(new java.awt.Color(255, 255, 255));
        panelVideo1.setMaximumSize(new java.awt.Dimension(640, 480));
        panelVideo1.setMinimumSize(new java.awt.Dimension(640, 480));
        panelVideo1.setName(""); // NOI18N
        panelVideo1.setPreferredSize(new java.awt.Dimension(640, 480));
        panelVideo1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelVideo1MouseDragged(evt);
            }
        });
        panelVideo1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelVideo1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelVideo1MouseReleased(evt);
            }
        });
        panelVideo1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                panelVideo1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout panelVideo1Layout = new javax.swing.GroupLayout(panelVideo1);
        panelVideo1.setLayout(panelVideo1Layout);
        panelVideo1Layout.setHorizontalGroup(
            panelVideo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        panelVideo1Layout.setVerticalGroup(
            panelVideo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );

        jButton2.setText("Connect Video");
        jButton2.setFocusable(false);
        jButton2.setRequestFocusEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Connect Control");
        jButton3.setFocusable(false);
        jButton3.setRequestFocusEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jSlider1.setValue(100);
        jSlider1.setEnabled(false);
        jSlider1.setRequestFocusEnabled(false);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel1.setText("Limiter: 100");
        jLabel1.setEnabled(false);
        jLabel1.setFocusable(false);
        jLabel1.setRequestFocusEnabled(false);

        jButton1.setText("Message");
        jButton1.setEnabled(false);
        jButton1.setFocusable(false);
        jButton1.setRequestFocusEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setText("File");
        jButton5.setEnabled(false);
        jButton5.setFocusable(false);
        jButton5.setRequestFocusEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(panelVideo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(jButton3)
                        .addComponent(jLabel1)
                        .addComponent(jButton1)
                        .addComponent(jButton5))
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelVideo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelVideo1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jButton2.setEnabled(false);
        new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                try {
                    int nolaser = 0;
                    while (true) {
                        URL url;
                        if (test) {
                            url = new URL("http://192.168.8.108:8080/shot.jpg");
                        } else {
                            url = new URL("http://192.168.1.205:8080/shot.jpg");
                        }
                        ByteArrayOutputStream output;
                        try (InputStream input = url.openStream()) {
                            output = new ByteArrayOutputStream();
                            int bajt;
                            while ((bajt = input.read()) != -1) {
                                output.write(bajt);
                            }
                        }
                        output.close();
                        panelVideo1.image = new ImageIcon(output.toByteArray()).getImage();
                        if (laser) {
                            BufferedImage bufimg = new BufferedImage(640, 480, BufferedImage.TYPE_INT_RGB);
                            Graphics2D buffgraphic = bufimg.createGraphics();
                            buffgraphic.drawImage(new ImageIcon(output.toByteArray()).getImage(), 0, 0, null);
                            buffgraphic.dispose();
                            double max = -1;
                            int maxX = -1;
                            int maxY = -1;
                            for (int i = 0; i < 640; i = i + 1) {
                                for (int j = 240; j < 480; j = j + 1) {
                                    int r = new Color(bufimg.getRGB(i, j), false).getRed();
                                    int g = new Color(bufimg.getRGB(i, j), false).getGreen();
                                    int b = new Color(bufimg.getRGB(i, j), false).getBlue();
                                    double res = (r / (g + b + 1));
                                    if (res > max && r > 225 && g < 200 && b < 215 && b > 130) {
                                        max = res;
                                        maxX = i;
                                        maxY = j;
                                    }
                                }
                            }
                            if (maxX >= 0 && maxY >= 0) {
                                nolaser = 0;
                                Point p = new Point();
                                p.setLocation(maxX, maxY - 240);    //i
                                readCoordinates(p);
                                int r = new Color(bufimg.getRGB(maxX, maxY), false).getRed();
                                int g = new Color(bufimg.getRGB(maxX, maxY), false).getGreen();
                                int b = new Color(bufimg.getRGB(maxX, maxY), false).getBlue();
                                System.out.println(maxX + " x " + maxY + " = " + max + " R:" + r + " G:" + g + " B:" + b);
                            } else {
                                if (nolaser > 3) {
                                    setVariables(0, 0, 0, 0);
                                } else {
                                    nolaser++;
                                }
                            }
                        }
                        publish();
                    }
                } catch (MalformedURLException e) {
                    //blad url
                } catch (IOException e) {
                    //wyjatek io
                }
                jButton2.setEnabled(true);
                JOptionPane.showMessageDialog(rootPane, "Nie udało się połączyć z serwerem video, włącz go.");
                return null;
            }

            @Override
            protected void process(List<Void> chunks) {
                panelVideo1.repaint();
            }
        }.execute();
    }//GEN-LAST:event_jButton2ActionPerformed
    //odswiezanie obrazka
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jButton3.setEnabled(false);
        try {
            Socket s;
            if (test) {
                s = new Socket("127.0.0.1", 8080);//test
            } else {
                s = new Socket("192.168.1.201", 80);//robot
            }
            out = new PrintWriter(s.getOutputStream(), true);
            //System.out.println("Polaczono");
            jButton1.setEnabled(true);
            jButton5.setEnabled(true);
            jLabel1.setEnabled(true);
            jSlider1.setEnabled(true);
            backgroundSending();            //start wysylania w tle
        } catch (IOException ex) {
            System.out.println("Nie udało się połączyć, włącz serwer.");
            jButton3.setEnabled(true);
            JOptionPane.showMessageDialog(rootPane, "Nie udało się połączyć z mikrokontrolerem, włącz zasilanie robota.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    //podlaczanie do robota + background start
    private void panelVideo1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelVideo1MouseDragged
        readCoordinates(evt.getPoint());
    }//GEN-LAST:event_panelVideo1MouseDragged
    //detekcja zmiany polozenia myszy
    private void panelVideo1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelVideo1MouseReleased
        setVariables(0, 0, 0, 0);
    }//GEN-LAST:event_panelVideo1MouseReleased
    //zerowanie zmiennych sterujacych
    private void panelVideo1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelVideo1MousePressed
        if (data_flow == 2) {
            data_flow = 0;
            oknoPliku.setVisible(false);
        }
        readCoordinates(evt.getPoint());
    }//GEN-LAST:event_panelVideo1MousePressed
    //detekcja poczatkowego polozenia myszy
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        skala_mocy = jSlider1.getValue();
        jLabel1.setText("Limiter: " + skala_mocy);
    }//GEN-LAST:event_jSlider1StateChanged
    //czyszczenie komunikatu instruktazowego z pola tekstowego
    private void panelVideo1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_panelVideo1KeyPressed
        if (data_flow == 2) {
            data_flow = 0;
            oknoPliku.setVisible(false);
        }
        //System.out.println(evt.getKeyCode());
        Point p = new Point();
        int key = evt.getKeyCode();
        laser = false;
        if (key == 32) {
            p.setLocation(319, 239);
        } else if (key == 104) {
            p.setLocation(319, 0);
        } else if (key == 101) {
            p.setLocation(319, 119);
        } else if (key == 98) {
            p.setLocation(319, 359);
        } else if (key == 96) {
            p.setLocation(319, 479);
        } else if (key == 103) {
            p.setLocation(0, 0);
        } else if (key == 100) {
            p.setLocation(0, 119);
        } else if (key == 97) {
            p.setLocation(0, 359);
        } else if (key == 39) {
            p.setLocation(0, 479);
        } else if (key == 105) {
            p.setLocation(639, 0);
        } else if (key == 102) {
            p.setLocation(639, 119);
        } else if (key == 99) {
            p.setLocation(639, 359);
        } else if (key == 110) {
            p.setLocation(639, 479);
        } else if (key == 107) {
            laser = true;
            p.setLocation(319, 239);
        } else {
            p.setLocation(319, 239);
        }
        readCoordinates(p);
    }//GEN-LAST:event_panelVideo1KeyPressed
    //przeslanie wartosci sterujacych z klawiaruty poprzez imitowanie klikniecia w punkt
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String message = JOptionPane.showInputDialog(rootPane, "Write message to ZRJ server:");
        out.println(message);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        oknoPliku = new OknoPliku(this);
        oknoPliku.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed
    //otwarcie pomocniczego okna z mozliwoscia wyslania wiadomosci do serwera

    private void backgroundSending() {
        new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                try {
                    while (!isCancelled()) {
                        String send = parseString(moc_max);
                        send = send + ":" + parseString(l_diff);
                        send = send + ":" + parseString(r_diff);
                        send = send + ":" + parseString(drive_direction);
                        send = send + "+++";
                        if (data_flow == 0) {
                            out.println(send);
                        } else if (data_flow == 1) {
                            out.println(send);
                            lista.add(send);
                        } else if (data_flow == 2 && !lista.isEmpty()) {
                            try {
                                lista.remove(0);
                                out.println(lista.get(0));
                            } catch (IndexOutOfBoundsException ex) {
                                data_flow = 0;
                                oknoPliku.setVisible(false);
                            }
                        }

                        //System.out.println(send);
                        Thread.sleep(130);
                    }
                } catch (InterruptedException ex) {
                    //Logger.getLogger(Okno.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;
            }
        }.execute();
    }

    //wątek tła, wysyłanie w tle   
    private String parseString(int input) {
        String output;
        output = "" + input;
        if (input < 10) {
            output = "0" + output;
        }
        if (input < 100) {
            output = "0" + output;
        }
        return output;
    }
    //konwersja wartosci numerycznych na 3-elementowy String

    private int xFromPoint(Point p) {
        int x = p.x;
        if (x < 0) {
            x = 0;
        }
        if (x > 639) {
            x = 639;
        }
        return x;
    }
    //ograniczenie wspolrzednej x do odpowiedniego zakresu 

    private int yFromPoint(Point p) {
        int y = p.y;
        if (y < 0) {
            y = 0;
        }
        if (y > 479) {
            y = 479;
        }
        return y;
    }
    //ograniczenie wspolrzednej y do odpowiedniego zakresu 

    private void setVariables(int a, int b, int c, int d) {
        moc_max = a;
        l_diff = b;
        r_diff = c;
        drive_direction = d;
    }
    //wstawienie wartosci liczbowych do zmiennych

    private void readCoordinates(Point p) {
        int x = xFromPoint(p);
        int y = yFromPoint(p);
        int moc, l, r, dir;
        moc = y - 239;
        if (moc < 0) {
            dir = 21;                   //kierunek
            moc = -moc;
        } else if (moc > 0) {
            dir = 12;                   //kierunek
        } else {
            dir = 0;
        }
        moc = (moc * skala_mocy) / 239;
        r = x - 319;
        if (r >= 0) {
            r = (r * skala_skretu) / 319;
            l = 0;
        } else {
            r = -r;
            l = (r * skala_skretu) / 319;
            r = 0;
        }
        setVariables(moc, l, r, dir);
    }

    //interpretacja wartosci wejsciowych i reprezentacja ich poprzez wyskalowane wartosci zmiennych sterujacych
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Okno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Okno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Okno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Okno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Okno().setVisible(true);
            }
        });
    }
    //otwarcie okienka

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSlider jSlider1;
    private ZRJClient.PanelVideo panelVideo1;
    // End of variables declaration//GEN-END:variables
}
